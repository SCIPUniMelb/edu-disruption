knitr::opts_chunk$set(error = TRUE, collapse = TRUE, comment = "#>")
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
# libraries needed
library(tidyverse)
library(jsonlite)
set.seed(8675309) # makes sure random numbers are reproducible
citibike <- fromJSON("http://citibikenyc.com/stations/json")
?jsonlite
install.packages("glue")
install.packages("glue")
library(glue)
install.packages("httr")
install.packages("httr")
library(httr)
base_url = "https://collections.museumvictoria.com.au/api/search?"
mv_df <-httr::GET(url = base_url, query = list(q = "food+war"))
View(mv_df)
mv_response <- content(mv_df, as = "text", encoding = "UTF-8")
base_url = "https://collections.museumvictoria.com.au/api/search?"
mv_df <-httr::GET(url = base_url, query = list(q = "food+war")) %>%
content(mv_df, as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(mv_response, flatten = TRUE) %>%
data.frame()
mv_df <-httr::GET(url = base_url, query = list(q = "food+war")) %>%
content(as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(mv_response, flatten = TRUE) %>%
data.frame()
mv_df <-httr::GET(url = base_url, query = list(q = "food+war")) %>%
content(as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE) %>%
data.frame()
View(mv_df)
str(mv_df)
class(mv_df)
glimpse(mv_df)
ncol(mv_df)
trove_df <-httr::GET(url = trove_base_url, query = list(key="3fa0o2759s1qasoi", zone="book", q = "society", l-format="Thesis")) %>%
content(as = "text", encoding = "UTF-8") %>%
jsonlite::fromJSON(flatten = TRUE) %>%
data.frame()
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
trove_base_url = "http://api.trove.nla.gov.au/result?key="
api_key = "3fa0o2759s1qasoi"
zone = "&zone="
query = "&q="
type = "&encoding=json"
zone_name="newspaper"
question="car"
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
json_file=jsonlite::fromJSON(url_query)
library(XML)
json_file=jsonlite::fromJSON(url_query)
url_query
json_file = jsonlite::fromJSON(url_query)
trove_base_url = "http://api.trove.nla.gov.au/v2/result?key="
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
json_file = jsonlite::fromJSON(url_query)
View(json_file)
question="army"
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
json_file = jsonlite::fromJSON(url_query)
df = as.data.frame(json_file$response$zone$records$article)
View(df)
View(json_file)
View(json_file[["response"]][["zone"]][["records"]][["article"]][[1]])
shiny::runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
json_file[["response"]][["zone"]][["records"]][["article"]][[1]]
shiny::runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question, type)
trove_base_url = "http://api.trove.nla.gov.au/v2/result?key="
api_key = "3fa0o2759s1qasoi"
zone = "&zone="
query = "&q="
type = "&encoding=json"
zone_name="newspaper"
question="army"
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question, type)
url_query
result =  paste(trove_base_url, api_key, zone, zone_name, query, question, type)
result
trove_base_url = "http://api.trove.nla.gov.au/v2/result?key="
api_key = "3fa0o2759s1qasoi"
zone = "&zone="
query = "&q="
type = "&encoding=json"
zone_name="newspaper"
question="army"
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
library(httr)
r <- GET(url_query)
View(r)
r[["request"]]
content(r, "text")
jsonRespText <- GET(url_query)
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
# This package is required for Accessing APIS (HTTP or HTTPS URLS from Web)
library(httr)
#This package exposes some additional functions to convert json/text to data frame
library(rlist)
#This package exposes some additional functions to convert json/text to data frame
library(jsonlite)
#This library is used to manipulate data
library(dplyr)
install.packages("rlist")
#This package exposes some additional functions to convert json/text to data frame
library(rlist)
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
content(r, "text")          # raw text
content(jsonRespText, "text")          # raw text
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
# Shows raw data which is not structured and readable
jsonRespText<-content(resp, as="text")
trove_base_url = "http://api.trove.nla.gov.au/v2/result?key="
api_key = "3fa0o2759s1qasoi"
zone = "&zone="
query = "&q="
type = "&encoding=json"
zone_name="newspaper"
question="army"
url_query = paste0(trove_base_url, api_key, zone, zone_name, query, question,type)
resp <- GET(url_query)
# Shows raw data which is not structured and readable
jsonRespText<-content(resp, as="text")
jsonRespText
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
resp <- GET(url_query)
mydf <- fromJSON(resp)
View(resp)
resp[["request"]][["url"]]
resp <- GET(url_query)
# Shows raw data which is not structured and readable
jsonRespText<-content(resp, as="text")
mydf <- fromJSON(resp)
fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
mydf <- fromJSON(resp)
mydf
mydf <- fromJSON(jsonRespText)      # Convert JSON to data frame using jsonlite package
mydf
View(mydf)
mydf[["response"]][["zone"]]
View(mydf[["response"]][["zone"]])
View(mydf[["response"]][["zone"]][["records"]][["article"]][[1]])
View(mydf[["response"]][["zone"]][["records"]][["article"]][[1]])
check_key()
check_key()
check_key()
if (!(“rvest” %in% installed.packages())) {
if (!("rvest" %in% installed.packages())) {
install.packages("rvest")
}if (!("dplyr" %in% installed.packages())) {
if (!("rvest" %in% installed.packages())) {
install.packages("rvest")
}
if (!("dplyr" %in% installed.packages())) {
install.packages("dplyr")
}
library(rvest)
library(dplyr)
hot100page <- “https://www.billboard.com/charts/hot-100"
hot100page <- "https://www.billboard.com/charts/hot-100"
hot100 <- read_html(hot100page)hot100
hot100page <- "https://www.billboard.com/charts/hot-100"
hot100 <- read_html(hot100page)
hot100
str(hot100)
body_nodes <- hot100 %>%
html_node(“body”) %>%
body_nodes <- hot100 %>%
html_node("body") %>%
html_children()
body_nodes
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()artist <- hot100 %>%
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()artist <- hot100 %>%
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()
artist <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__artist')]") %>%
rvest::html_text()
title <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__song')]") %>%
rvest::html_text()
chart_df <- data.frame(rank, artist, title)knitr::kable(
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()
artist <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__artist')]") %>%
rvest::html_text()
title <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__song')]") %>%
rvest::html_text()
chart_df <- data.frame(rank, artist, title)knitr::kable(chart_df  %>%
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()
artist <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__artist')]") %>%
rvest::html_text()
title <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__song')]") %>%
rvest::html_text()
chart_df <- data.frame(rank, artist, title)
knitr::kable(chart_df  %>%
head(10)
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()
artist <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__artist')]") %>%
rvest::html_text()
title <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__song')]") %>%
rvest::html_text()
chart_df <- data.frame(rank, artist, title)
knitr::kable(
chart_df  %>% head(10)
rank <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__rank__number')]") %>%
rvest::html_text()
artist <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__artist')]") %>%
rvest::html_text()
title <- hot100 %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'chart-element__information__song')]") %>%
rvest::html_text()
chart_df <- data.frame(rank, artist, title)
knitr::kable(
chart_df  %>% head(10))
shiny::runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
runApp('~/Documents/GitHub/TRAINING/07 APIs/scripts/Trove_workshop/TroveApp')
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("datasetName", "Dataset", c("", "pressure", "cars")),
plotOutput("plot"),
tableOutput("table")
)
server <- function(input, output, session) {
dataset <- reactive({
# Make sure requirements are met
req(input$datasetName)
get(input$datasetName, "package:datasets", inherits = FALSE)
})
output$plot <- renderPlot({
plot(dataset())
})
output$table <- renderTable({
head(dataset(), 10)
})
}
shinyApp(ui, server)
